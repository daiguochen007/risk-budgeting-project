# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return( -1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x ))
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- rb_c_weight(cov,rho,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
rw_lb<- rep(0.15,nrow(cov))
w0<- rb_c_weight(cov,rho,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
rb_c_weight2<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(sigma^2)#-1* (ret%*%x-rf)/sigma )
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(2*cov%*%x)#-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x ))
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
w0<- rb_c_weight(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
rb_c_weight<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret%*%x-rf)/sigma )
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return( -1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x ))
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- rb_c_weight(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
w0<- c(1.5,-0.25,-0.25)
w0<- rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
rb_weight2<- function(cov,rho,w_lb,w_ub,w0){
eval_f <- function(x) {
return(sum((x*(cov%*%x) - as.numeric(t(x)%*%cov%*%x)*b)^2) + rho*t(x)%*%cov%*%x)
}
# Gradient
eval_grad_f <- function(x) {
e<- diag(length(x))
res<-0
temp<- x*(cov%*%x) - as.numeric(t(x)%*%cov%*%x)*b
for (i in 1:length(x)){
res<- res+2*temp[i]*(e[i,]%*%t(cov[i,])+t(e[i,]%*%t(cov[i,])))%*%x
}
return(res + rho*2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
rho<-100
beta<-0.6
while (rho >= 10^-6){
rho<- rho*beta
w0<- rb_weight2(cov,rho,w_lb,w_ub,w0)
print(w0)
}
b<- c(0.2,0.3,0.5)
while (rho >= 10^-6){
rho<- rho*beta
w0<- rb_weight2(cov,rho,w_lb,w_ub,w0)
print(w0)
}
w0<- c(1.5,-2,1.5)
while (rho >= 10^-6){
rho<- rho*beta
w0<- rb_weight2(cov,rho,w_lb,w_ub,w0)
print(w0)
}
rho<-100
beta<-0.6
while (rho >= 10^-6){
rho<- rho*beta
w0<- rb_weight2(cov,rho,w_lb,w_ub,w0)
print(w0)
}
rb_c_weight2<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(sigma^2)#-1* (ret%*%x-rf)/sigma )
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(2*cov%*%x)#-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x ))
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- c(1.5,-0.25,-0.25)
rw_lb<- rep(-1,nrow(cov))
rw_ub<- rep(1,nrow(cov))
w0<- rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
w0<- c(1.5,-0.25,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
rw_lb<- rep(0.15,nrow(cov))
rw_ub<- rep(0.5,nrow(cov))
n<- 30
for(i in 1:n){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_weight3(cov,rho,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
num<- 30
for(i in 1:n){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_weight3(cov,rho,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
num<- 30
for(i in 1:n){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,rho,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
num<- 30
for(i in 1:n){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
w0<- c(1.5,-0.25,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 20
for(i in 1:n){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
w0<- c(1.5,-0.25,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
#w0<- rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
num<- 50
for(i in 1:n){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
(rw_lb - rep(-1,nrow(cov)))/num
(rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- c(1.5,-0.25,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
sqrt(t(w0)%*%(cov%*%w0))
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
w0<- c(1.5,-0.25,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
#w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
num<- 100
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
w0<- c(1.5,-0.25,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,c(1/3,1/3,1/3),ret,rf)
w0<- c(-0.5,1.75,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
rb_c_weight2<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret%*%x-rf)/sigma) #sigma^2)
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x )) #2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- c(-0.5,1.75,-0.25)
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,c(1/3,1/3,1/3),ret,rf)
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
cov<- matrix(c( 1.0,-0.9, 0.6,
-0.9, 1.0,-0.2,
0.6,-0.2, 4.0),nrow=3)
w0<- c(-0.5,1.75,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,c(1/3,1/3,1/3),ret,rf)
View(cov)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
View(cov)
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
