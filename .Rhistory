dy_rw_ub<- rep(1,nrow(cov))
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,c(1/3,1/3,1/3),ret,rf)
View(cov)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
View(cov)
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
library('nloptr')
################################## risk weight inequality constraints
cov<- matrix(c( 1.0, 0.3, 0.2,
0.3, 1.5, 0.4,
0.2, 0.4, 4.0),nrow=3)
# initial values
w0<- rep(1/nrow(cov),nrow(cov))
# weight bounds
w_lb<- rep(-3,nrow(cov))
w_ub<- rep(3,nrow(cov))
# risk weight bounds
rw_lb<- rep(0.15,nrow(cov))
rw_ub<- rep(0.5,nrow(cov))
#expected return
ret<- c(0.1, 0.2, 0.5)
rf<- 0.01
View(cov)
rb_c_weight2<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret%*%x-rf)/sigma) #sigma^2)
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x )) #2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- c(-0.5,1.75,-0.25)
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,rep(1/nrow(cov),nrow(cov)),ret,rf)
w0<- rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,rep(1/nrow(cov),nrow(cov)),ret,rf)
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
w0<- c(1.75,-0.5,-0.25)
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
rb_c_weight3<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
return(t(x)%*%cov%*%x)
}
# Gradient
eval_grad_f <- function(x) {
return(2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
w0<- c(1.75,-0.5,-0.25)
rb_c_weight3(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
#rb_c_weight3(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight3(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
w0<- c(1.75,-0.5,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
#rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
library(quantmod)
library(ggplot2)
library(ggfortify)
#sp500 sectors
sectors<- c("finan","discre","health","infotech","utility","industry","material","staple","telecom","energy","realestate")
all_data<-NULL
for (i in 1:11){
data<- read.csv(paste("/Users/guochendai/Desktop/4th semester/7043 capstone project/data/sec_",
sectors[i],".csv",sep=""))
data<- xts(data[,2:3],order.by=as.Date(data[,1], format="%m/%d/%y"))
#plot(data[,2],main=sectors[i])
all_data<- cbind(all_data, data[,2]/as.numeric(data[1,2]))
}
colnames(all_data)<- sectors
autoplot(all_data,facets = FALSE)
View(all_data)
all_data<- na.omit(all_data)
for (i in 1:ncol(all_data)){
all_data[,i]<- all_data[,i]/as.numeric(all_data[1,i])
}
autoplot(all_data,facets = FALSE)
View(all_data)
avg<- apply(all_data,1,mean)
avg<- xts(apply(all_data,1,mean),order.by = index(all_data))
View(avg)
View(avg)
spx<- read.csv("/Users/guochendai/Desktop/4th semester/7043 capstone project/data/spx.csv")
View(spx)
View(avg)
View(spx)
spx<- xts(spx[,3],order.by=as.Date(spx[,1], format="%m/%d/%y"))
View(spx)
View(avg)
df<- cbind(spx,avg)
View(df)
df<- na.omit(cbind(spx,avg))
View(df)
df[,1]<- df[,1]/as.numeric(df[1,1])
View(df)
plot(df)
autoplot(df)
autoplot(df,facets = F)
colnames(df)<- c("spx","synthesis")
autoplot(df,facets = F)
colnames(df)<- c("spx","synthesis spx")
autoplot(df,facets = F)
View(all_data)
sectors<- c("finan","discre","health","infotech","utility","industry","material","staple","telecom","energy","realestate")
all_data<-NULL
for (i in 1:11){
data<- read.csv(paste("/Users/guochendai/Desktop/4th semester/7043 capstone project/data/sec_",
sectors[i],".csv",sep=""))
data<- xts(data[,2:3],order.by=as.Date(data[,1], format="%m/%d/%y"))
#plot(data[,2],main=sectors[i])
all_data<- cbind(all_data, data[,2]/as.numeric(data[1,2]))
}
colnames(all_data)<- sectors
autoplot(all_data,facets = FALSE)
View(all_data)
avg<- xts(apply(all_data,1,mean),order.by = index(all_data))
View(avg)
all_data<- na.omit(all_data)
for (i in 1:ncol(all_data)){
all_data[,i]<- all_data[,i]/as.numeric(all_data[1,i])
}
autoplot(all_data,facets = FALSE)
avg<- xts(apply(all_data,1,mean),order.by = index(all_data))
spx<- read.csv("/Users/guochendai/Desktop/4th semester/7043 capstone project/data/spx.csv")
spx<- xts(spx[,3],order.by=as.Date(spx[,1], format="%m/%d/%y"))
df<- na.omit(cbind(spx,avg))
df[,1]<- df[,1]/as.numeric(df[1,1])
colnames(df)<- c("spx","synthesis spx")
autoplot(df,facets = F)
sectors<- c("finan","discre","health","infotech","utility","industry","material","staple","telecom","energy","realestate")
all_data<-NULL
for (i in 1:11){
data<- read.csv(paste("/Users/guochendai/Desktop/4th semester/7043 capstone project/data/sec_",
sectors[i],".csv",sep=""))
data<- xts(data[,2:3],order.by=as.Date(data[,1], format="%m/%d/%y"))
#plot(data[,2],main=sectors[i])
all_data<- cbind(all_data, data[,2]/as.numeric(data[1,2]))
}
colnames(all_data)<- sectors
all_data<- na.omit(all_data)
for (i in 1:ncol(all_data)){
all_data[,i]<- all_data[,i]/as.numeric(all_data[1,i])
}
autoplot(all_data,facets = FALSE)
View(all_data)
cov(all_data)
cov<- cov(all_data)
View(cov)
heatmap(cov)
View(cov)
heatmap(cov,Rowv=NA,Colv=NA)
View(cov)
heatmap(cov,Rowv=NA)
heatmap(cov,Rowv=NA,Colv=NA)
heatmap(cov,Rowv=NA,Colv=NA,col=cm.colors(256))
heatmap(cov,Rowv=NA,Colv=NA,col=cm.colors(5))
heatmap(cov,Rowv=NA,Colv=NA)
heatmap.2(cov,Rowv=NA,Colv=NA)
heatmap2(cov,Rowv=NA,Colv=NA)
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
pheatmap(cov)
autoplot(all_data,facets = FALSE)
pheatmap(cov,Rowv=NA,Colv=NA)
pheatmap(cov,kmeans_k = NA)
pheatmap(cov,cluster_rows = F,cluster_cols = F)
pheatmap(cov)
View(all_data)
View(all_data)
for (i in i:10){
cov<- cov(all_data[(387*(i-1)+1):387*i,])
pheatmap(cov,main=i)
}
for (i in 1:10){
cov<- cov(all_data[(387*(i-1)+1):387*i,])
pheatmap(cov,main=i)
}
seq(387*(i-1)+1,387*i,1)
for (i in 1:10){
cov<- cov(all_data[seq(387*(i-1)+1,387*i,1),])
pheatmap(cov,main=i,cluster_rows = F,cluster_cols = F)
}
View(data)
View(all_data)
data<- all_data[1:90,]
View(all_data)
View(data)
data<- all_data[91:180,]
View(data)
for (i in 1:ncol(data)){
data[,i]<- data[,i]/as.numeric(data[1,i])
}
View(data)
autoplot(data,facets = FALSE)
#seperate time period
insam_data<- all_data[91:180,]
for (i in 1:ncol(insam_data)){
insam_data[,i]<- insam_data[,i]/as.numeric(insam_data[1,i])
}
#autoplot(insam_data,facets = FALSE)
View(insam_data)
View(insam_data)
ret <- apply(insam_data,2,mean)
View(cov)
View(insam_data)
View(insam_data)
ret <- apply(insam_data,2,mean)-1
ret <- apply(insam_data-1,2,mean)
ret <- apply(insam_data,2,mean)-1
View(insam_data)
cov<- cov(insam_data)
View(cov)
pheatmap(cov)
pheatmap(cov,cluster_rows = F,cluster_cols = F)
autoplot(insam_data,facets = FALSE)
apply(insam_data,2,mean)-1
insam_data[nrow(insam_data),]
View(insam_data)
(1/nrow(insam_data))
insam_data[nrow(insam_data),]^(1/nrow(insam_data))
insam_data[nrow(insam_data),]^(1/nrow(insam_data))-1
View(insam_data)
View(insam_data)
ret <- (apply(insam_data,2,mean)-1)*252
ret<- (insam_data[nrow(insam_data),]^(1/nrow(insam_data))-1)*252
View(ret)
ret<- as.data.frame.vector((insam_data[nrow(insam_data),]^(1/nrow(insam_data))-1)*252)
View(ret)
ret<- as.vector((insam_data[nrow(insam_data),]^(1/nrow(insam_data))-1)*252)
as.vector((insam_data[nrow(insam_data),]^(1/nrow(insam_data))-1)*252)
(apply(insam_data,2,mean)-1)*252
as.matrix((insam_data[nrow(insam_data),]^(1/nrow(insam_data))-1)*252)
cov<- cov(insam_data)*252
View(cov)
pheatmap(cov,cluster_rows = F,cluster_cols = F)
w0<- rep(1/nrow(cov),nrow(cov))
w0<- rep(1/nrow(cov),nrow(cov))
# weight bounds
w_lb<- rep(-3,nrow(cov))
w_ub<- rep(3,nrow(cov))
# risk weight bounds
rw_lb<- rep(0.15,nrow(cov))
rw_ub<- rep(0.6,nrow(cov))
#rf
rf<- 0.03
rb_c_weight2<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret%*%x-rf)/sigma) #sigma^2)
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x )) #2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
library(nloptr)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight3(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
rw_lb<- rep(0,nrow(cov))
rw_ub<- rep(0.5,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
w0<- rep(1/nrow(cov),nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
#volatility
sqrt(t(w0)%*%(cov%*%w0))
#sharpe
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
#volatility
sqrt(t(w0)%*%(cov%*%w0))
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
#volatility
sqrt(t(w0)%*%(cov%*%w0))
#sharpe
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
rw_lb<- rep(0.05,nrow(cov))
rw_ub<- rep(0.5,nrow(cov))
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
w0<- rep(1/nrow(cov),nrow(cov))
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
#risk contribution of each asset
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
#volatility
sqrt(t(w0)%*%(cov%*%w0))
#sharpe
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
#volatility
sqrt(t(w0)%*%(cov%*%w0))
w0
View(insam_data)
port<- insam_data%*%t(w0)
