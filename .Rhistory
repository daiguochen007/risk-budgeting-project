return(t(x)%*%cov%*%x)
}
# Gradient
eval_grad_f <- function(x) {
return(2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
###------------------------------------optimizing module-#
w0<- rep(1/nrow(cov),nrow(cov))
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight3(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
#print(w0)
}
###------------------------------------------------------#
return(w0)
}
#simple min variance optimization func
optimal_weight_minvar<- function(cov,w_lb,w_ub,ret,target=NULL){
w0<- rep(1/nrow(cov),nrow(cov))
eval_f <- function(x) {
return(t(x)%*%cov%*%x)
}
# Gradient
eval_grad_f <- function(x) {
return(2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
if(is.null(target)){
return(sum(x)-1)
}else{
return(c(sum(x)-1,ret%*%x-target))
}
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
if(is.null(target)){
return(rep(1,length(x)))
}else{
return(rbind(rep(1,length(x)),ret))
}
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
#simple max sharpe ratio
optimal_weight_ms<- function(cov,w_lb,w_ub,ret,rf){
w0<- rep(1/nrow(cov),nrow(cov))
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret%*%x-rf)/sigma)
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x ))
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
# get return from price
ret_xts<- function(data,log=FALSE){
if (log==FALSE){
for (i in 1:ncol(data)){
data[,i]<- data[,i]/lag(data[,i])-1
}
data[is.na(data)]<- 0
return(data)
}else{
for (i in 1:ncol(data)){
data[,i]<- log(data[,i]/lag(data[,i]))
}
data[is.na(data)]<- 0
return(data)
}
}
# get average risk free rate within a period
get_rf<- function(start,end){
rf_vec<- rf_ts[which(index(rf_ts)>=start&index(rf_ts)<=end),]
return(mean(rf_vec)/100)
}
# get performance analysis
get_perf<- function(xts_df,rf_ts){
#vec func
get_perf_vec<- function(vec,rf_ts){
id<- c("annual_ret","annual_vol","sharpe_ratio","maxdrawdown","maxdown_time(y)")
mat<- matrix(NA,length(id),1)
rownames(mat)<-id
colnames(mat)<- colnames(vec)
mat[1,1]<- sum(ret_xts(vec,log=T))*252/length(vec)
mat[2,1]<- sd(ret_xts(vec,log=T))*sqrt(252)
mat[3,1]<- (mat[1,1] - get_rf(index(vec)[1],index(vec)[length(vec)]))/mat[2,1]
v_max<- 0
mdd<- 1
mdt<- 0
for (i in 1:length(vec)){
v_max<- max(vec[i],v_max)
mdd<- min(mdd,vec[i]/v_max)
if (vec[i]<v_max){
dt<- dt+1
}else{
dt=0
}
mdt<- max(mdt,dt)
}
mat[4,1]<- 1-mdd
mat[5,1]<- mdt/252
return(mat)
}
if (ncol(xts_df)==1){
return(get_perf_vec(xts_df,rf_ts))
}else{
res<-NULL
for (i in 1:ncol(xts_df)){
res<- cbind(res,get_perf_vec(xts_df[,i],rf_ts))
}
return(res)
}
}
# back-test program
rb_back_test<- function(all_data,start_date,end_date,insam_length,outsam_length,
w_lb,w_ub,rw_lb,rw_ub,rf_ts,mv_target=NULL){
all_data<- all_data[which(index(all_data)>=start_date&index(all_data)<=end_date),]
if (nrow(all_data)<insam_length+outsam_length){
cat("The length of all_data is shorter than insam + outsam!")
return("Function terminated")
}else{
outsam_index_list <- seq(0,(nrow(all_data)-insam_length)%/%outsam_length-1,1)*outsam_length+insam_length+1
outsam_index_list <- cbind(outsam_index_list,outsam_index_list+outsam_length-1)
insam_index_list <- outsam_index_list - outsam_length
insam_index_list[,1] <- insam_index_list[,1] - insam_length + outsam_length
}
cat("start backtesting...\n")
# core loop
# serval things we are interested: weights, risk contribution(in/out), performance(in/out), sharpe(i/o), benchmark sharpe(i/o)
weight_ts=NULL
insamRC_ts = NULL
outsamRC_ts = NULL
#sharpe ratio
insam_sharpe_ts = NULL
outsam_sharpe_ts = NULL
avg_insam_sharpe_ts = NULL
avg_outsam_sharpe_ts = NULL
mv_insam_sharpe_ts = NULL
mv_outsam_sharpe_ts = NULL
ms_insam_sharpe_ts = NULL
ms_outsam_sharpe_ts = NULL
#outsam performance
outsam_perf=NULL
mv_outsam_perf = NULL
avg_outsam_perf = NULL
ms_outsam_perf= NULL
for (j in 1:nrow(insam_index_list)){
############################################# insample data
#seperate time period
insam_data<- all_data[insam_index_list[j,1]:insam_index_list[j,2],]
#get insam rf rate
rf<- get_rf(index(all_data[insam_index_list[j,1],]),index(all_data[insam_index_list[j,2],]))
#geo insam ret
#ret<- ((as.vector(insam_data[nrow(insam_data),])/as.vector(insam_data[1,]))^(1/nrow(insam_data))-1)*252
# log ret / simple ret
ret<- apply(ret_xts(insam_data),2,mean)*252 # log =T
cov<- cov(ret_xts(insam_data))*252  # log = T
###------------------------------------core optimizing module-#
w0<- optimal_weight_ms_rb(cov,w_lb,w_ub,rw_lb,rw_ub,ret,rf)           #optimal
w1<- optimal_weight_minvar(cov,w_lb,w_ub,ret,target=mv_target)     #min-var
w2<- optimal_weight_ms(cov,w_lb,w_ub,ret,rf)                       #max sharpe
wn<- rep(1/nrow(cov),nrow(cov))
###-----------------------------------------------------------#
#if problem with w0,replace
#if(sum(w0)>1.1||sum(w0)<0.9){
#  w0<- rep(1/nrow(cov),nrow(cov))
#}
#weight time series
weight_ts<- rbind(weight_ts,w0)
#insam risk contribution ts
insamRC_ts<- rbind(insamRC_ts, t(w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)))
#sharp ratio ts
insam_sharpe_ts<- c(insam_sharpe_ts,(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0))
mv_insam_sharpe_ts<- c(mv_insam_sharpe_ts,(ret%*%w1-rf)/sqrt(t(w1)%*%cov%*%w1))
avg_insam_sharpe_ts<- c(avg_insam_sharpe_ts,(ret%*%wn-rf)/sqrt(t(wn)%*%cov%*%wn))
ms_insam_sharpe_ts<- c(ms_insam_sharpe_ts,(ret%*%w2-rf)/sqrt(t(w2)%*%cov%*%w2))
############################################# outsample data
#seperate time period
outsam_data<- all_data[outsam_index_list[j,1]:outsam_index_list[j,2],]
#outsam risk contribution ts
cov<- cov(ret_xts(outsam_data))*252  #log = T
outsamRC_ts<- rbind(outsamRC_ts, t(w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)))
#outsam sharp ratio ts
rf<- get_rf(index(all_data[outsam_index_list[j,1],]),index(all_data[outsam_index_list[j,2],]))
ret<- apply(ret_xts(outsam_data),2,mean)*252  # log = T
outsam_sharpe_ts<- c(outsam_sharpe_ts,(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0))
mv_outsam_sharpe_ts<- c(mv_outsam_sharpe_ts,(ret%*%w1-rf)/sqrt(t(w1)%*%cov%*%w1))
avg_outsam_sharpe_ts<- c(avg_outsam_sharpe_ts,(ret%*%wn-rf)/sqrt(t(wn)%*%cov%*%wn))
ms_outsam_sharpe_ts<- c(ms_outsam_sharpe_ts,(ret%*%w2-rf)/sqrt(t(w2)%*%cov%*%w2))
#outsam portfolio performance
out_perf<- xts(cumprod(as.matrix(ret_xts(outsam_data))%*%w0+1),order.by = index(outsam_data))
mv_out_perf<- xts(cumprod(as.matrix(ret_xts(outsam_data))%*%w1+1),order.by = index(outsam_data))
avg_out_perf<- xts(cumprod(as.matrix(ret_xts(outsam_data))%*%wn+1),order.by = index(outsam_data))
ms_out_perf<- xts(cumprod(as.matrix(ret_xts(outsam_data))%*%w2+1),order.by = index(outsam_data))
if (is.null(outsam_perf)){
outsam_perf = out_perf
mv_outsam_perf = mv_out_perf
avg_outsam_perf = avg_out_perf
ms_outsam_perf = ms_out_perf
}else{
outsam_perf = rbind(outsam_perf, out_perf*as.numeric(outsam_perf[length(outsam_perf)]))
mv_outsam_perf = rbind(mv_outsam_perf, mv_out_perf*as.numeric(mv_outsam_perf[length(mv_outsam_perf)]))
avg_outsam_perf = rbind(avg_outsam_perf, avg_out_perf*as.numeric(avg_outsam_perf[length(avg_outsam_perf)]))
ms_outsam_perf = rbind(ms_outsam_perf, ms_out_perf*as.numeric(ms_outsam_perf[length(ms_outsam_perf)]))
}
cat("=")
}
cat("\nBack test finished!\n")
# time series of weights, RC, sharpe
weight_ts<- xts(weight_ts,order.by = index(all_data)[outsam_index_list[,1]])
colnames(weight_ts)<- colnames(all_data)
insamRC_ts<- xts(insamRC_ts,order.by = index(all_data)[outsam_index_list[,1]])
colnames(insamRC_ts)<- colnames(all_data)
outsamRC_ts<- xts(outsamRC_ts,order.by = index(all_data)[outsam_index_list[,1]])
colnames(outsamRC_ts)<- colnames(all_data)
insam_sharpe_ts<- xts(insam_sharpe_ts,order.by = index(all_data)[outsam_index_list[,1]])
outsam_sharpe_ts<- xts(outsam_sharpe_ts,order.by = index(all_data)[outsam_index_list[,1]])
sharpe_ts<- cbind(insam_sharpe_ts,avg_insam_sharpe_ts,mv_insam_sharpe_ts,ms_insam_sharpe_ts,
outsam_sharpe_ts,avg_outsam_sharpe_ts,mv_outsam_sharpe_ts,ms_outsam_sharpe_ts)
colnames(sharpe_ts)<- c("insample","insample 1/n","insample mv","insample ms",
"outsample","outsample 1/n","outsample mv","outsample ms")
#time series of outsam result
out_result<- cbind(outsam_perf,avg_outsam_perf,mv_outsam_perf,ms_outsam_perf)
colnames(out_result)<-c("optimal portfolio","1/n","min-var portfolio","max-sharpe portfolio")
return(list("weight_ts"=weight_ts,
"insamRC_ts"=insamRC_ts,
"outsamRC_ts"=outsamRC_ts,
"out_result"=out_result,
"sharpe"=sharpe_ts))
}
#show back test result: plot&table
show_result<- function(res, rf_ts){
basic<- paste("(",name,"/insam=",insam_length,"d outsam=",outsam_length,"d/weight=[",w_lb[1],",",w_ub[1],"] risk weight=[",rw_lb[1],",",rw_ub[1],"])",sep="")
#weights
w_data<- cbind(index(res$weight_ts),as.data.frame(res$weight_ts))
colnames(w_data)[1]<-"date"
grid.arrange(ggplot(melt(w_data,id="date"),aes(date,value,colour=variable))+geom_line()+ggtitle(paste("time series of optimized weights",basic)),
ggplot(melt(w_data,id="date"),aes(date,value))+geom_area(aes(fill=variable)))
#risk contribution
d1<- cbind(index(res$insamRC_ts),as.data.frame(res$insamRC_ts),rep("insample",nrow(res$insamRC_ts)))
colnames(d1)[c(1,ncol(d1))]<-c("date","class")
d2<- cbind(index(res$outsamRC_ts),as.data.frame(res$outsamRC_ts),rep("outsample",nrow(res$outsamRC_ts)))
colnames(d2)[c(1,ncol(d2))]<-c("date","class")
p<-ggplot(melt(rbind(d1,d2),id=c("date","class")), aes(date,value,colour=variable)) + geom_line() +
facet_wrap(~ class,scales = "free",ncol = 1)+ggtitle(paste("time series of risk contributions",basic))
print(p)
p<-ggplot(melt(rbind(d1,d2),id=c("date","class")), aes(date,value)) + geom_area(aes(fill=variable)) +
facet_wrap(~ class,scales = "free",ncol = 1)+ggtitle(paste("time series of risk contributions (filled)",basic))
print(p)
#insample performance
d1<- cbind(data.frame(date=index(res$out_result), coredata(res$out_result)),rep("outsample",nrow(res$out_result)))
colnames(d1)<-c("date","optimal portfolio","1/n","min-var portfolio","max-sharpe portfolio","class")
p<-ggplot(melt(d1,id=c("date","class")), aes(date,value,colour=variable)) + geom_line()+ggtitle(paste("time series of performance",basic))
print(p)
#sharpe ratio ts
sr_data<- cbind(index(res$sharpe),as.data.frame(res$sharpe))
colnames(sr_data)<- c("date","optimal portfolio","1/n portfolio","min-var portfolio","max-sharpe portfolio",
"optimal portfolio","1/n portfolio","min-var portfolio","max-sharpe portfolio")
sr_data<- rbind(sr_data[,1:5],sr_data[,c(1,6,7,8,9)])
sr_data<-cbind(sr_data,c(rep("insample",nrow(sr_data)/2),rep("outsample",nrow(sr_data)/2)))
colnames(sr_data)[ncol(sr_data)]<- "class"
sr_data<- melt(sr_data,id=c("date","class"))
colnames(sr_data)[4]<- "sharpe"
p<- ggplot(sr_data,aes(date,sharpe,colour=variable)) + geom_line() + facet_wrap(~ class,ncol=1)+ggtitle(paste("time series of sharpe ratio",basic))
print(p)
p<- ggplot(sr_data,aes(date,sharpe,colour=class)) + geom_line() + facet_wrap(~ variable,ncol = 1)+ggtitle(paste("time series of sharpe ratio",basic))
print(p)
print("outsample perf analysis:")
print(get_perf(res$out_result,rf_ts))
}
############################################# risk free rate
rf_ts<- read.csv("/Users/guochendai/Desktop/4th semester/7043 capstone project/data/tbill3m.csv")
rf_ts<- xts(rf_ts[,2],order.by=as.Date(rf_ts[,1], format="%m/%d/%Y"))
############################################# sp500 sector data
sectors<- c("finan","discre","health","infotech","utility","industry","material","staple","telecom","energy","realestate")
path<- "/Users/guochendai/Desktop/4th semester/7043 capstone project/data/sec_"
name<- "s&p sector"
all_data<- get_alldata(sectors,path)
start_date = index(all_data)[1]
end_date = "2017/3/19"
insam_length = 90
outsam_length = 30
# weight bounds
w_lb<- rep(0,ncol(all_data))
w_ub<- rep(1,ncol(all_data))
# risk weight bounds
rw_lb<- rep(0,ncol(all_data))
rw_ub<- rep(0.5,ncol(all_data))
############################################ run
res<- rb_back_test(all_data,start_date,end_date,insam_length,outsam_length,w_lb,w_ub,rw_lb,rw_ub,rf_ts,NULL)
show_result(res)
############################################# asset group data
assets<- c("spx","dow","crb","us_agg","reit","nasdaq","euro_50","ftse100","cac40","dax","nikkei","hsi","csi300","euro_agg","asianpacific_agg","global_highyield")
path<- "/Users/guochendai/Desktop/4th semester/7043 capstone project/data/"
name<- "global assets"
all_data<- get_alldata(assets,path)
############################################# parameters
start_date = index(all_data)[1]
end_date = "2017/3/19"
insam_length = 90
outsam_length = 30
# weight bounds
w_lb<- rep(0,ncol(all_data))
w_ub<- rep(1,ncol(all_data))
# risk weight bounds
rw_lb<- rep(0,ncol(all_data))
rw_ub<- rep(0.5,ncol(all_data))
############################################ run
res<- rb_back_test(all_data,start_date,end_date,insam_length,outsam_length,w_lb,w_ub,rw_lb,rw_ub,rf_ts,NULL)
show_result(res)
View(all_data)
cov(all_data)
cov(ret_xts(all_data))
################################## risk weight inequality constraints
cov<- matrix(c(   0.01,  0.009, -0.005,
0.009, 0.0225,   0.01,
-0.005,   0.01,   0.04),nrow=3)
w0<- rep(1/nrow(cov),nrow(cov))
# weight bounds
w_lb<- rep(-3,nrow(cov))
w_ub<- rep(3,nrow(cov))
# risk weight bounds
rw_lb<- rep(0.15,nrow(cov))
rw_ub<- rep(0.6,nrow(cov))
#expected return
ret<- c(0.1, 0.15, 0.25)
rf<- 0.01
rb_c_weight2<- function(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf){
eval_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret%*%x-rf)/sigma) #sigma^2)
}
# Gradient
eval_grad_f <- function(x) {
sigma<- sqrt(t(x)%*%cov%*%x)
return(-1* (ret/sigma - as.numeric((ret%*%x-rf)/sigma^3) * cov%*%x )) #2*cov%*%x)
}
# equality constraint function
eval_g0 <- function(x) {
return(sum(x)-1)
}
# jacobian of equality constraint
eval_jac_g0 <- function(x) {
return(rep(1,length(x)))
}
# inequality constraint function
eval_g1 <- function(x) {
var<- as.numeric(t(x)%*%cov%*%x)
return(c(rw_lb - x*(cov%*%x)/var,x*(cov%*%x)/var - rw_ub))
}
# jacobian of inequality constraint
eval_jac_g1 <- function(x) {
#return n*n matrix
#x<-w0
var<- as.numeric(t(x)%*%cov%*%x)
#i= 1~length(x)
mat=NULL
for (i in 1:length(x)){
vec1<- cov[i,]*x[i]
vec1[i]<- vec1[i]+(cov%*%x)[i]
vec1<- vec1/var
vec1<- t(vec1 - 2*x[i]*(cov%*%x)[i]/var^2 * (cov%*%x))
mat= rbind(mat,vec1)
}
return(rbind(-mat,mat))
}
# solve fortfolio function
res <- nloptr( x0=w0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=eval_g0,
eval_jac_g_eq=eval_jac_g0,
eval_g_ineq = eval_g1,
eval_jac_g_ineq = eval_jac_g1,
lb = w_lb,
ub = w_ub,
opts=list("algorithm"="NLOPT_LD_SLSQP","xtol_rel"=1.0e-8))
#solution
return(res$solution)
}
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0<- c(1.75,-0.5,-0.25)
rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
w0<- c(1.75,-0.5,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
#rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
print(w0)
}
w0<- c(1.75,-0.5,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
#rb_c_weight2(cov,w_lb,w_ub,rw_lb,rw_ub,w0,ret,rf)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
cat(i)
print(w0)
}
w0*(cov%*%w0)/as.numeric(t(w0)%*%cov%*%w0)
(ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0)
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
cat(i)
print(w0)
print((ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0))
}
w0<- c(1.75,-0.5,-0.25)
#start constraint
dy_rw_lb<- rep(-1,nrow(cov))
dy_rw_ub<- rep(1,nrow(cov))
num<- 50
for(i in 1:num){
dy_rw_lb<- dy_rw_lb + (rw_lb - rep(-1,nrow(cov)))/num
dy_rw_ub<- dy_rw_ub + (rw_ub - rep(1,nrow(cov)))/num
w0<- rb_c_weight2(cov,w_lb,w_ub,dy_rw_lb,dy_rw_ub,w0,ret,rf)
cat(i)
print(w0)
print((ret%*%w0-rf)/sqrt(t(w0)%*%cov%*%w0))
}
